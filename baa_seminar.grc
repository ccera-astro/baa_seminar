<?xml version='1.0' encoding='utf-8'?>
<?grc format='1' created='3.7.13'?>
<flow_graph>
  <timestamp>Mon Aug  9 12:36:08 2021</timestamp>
  <block>
    <key>options</key>
    <param>
      <key>author</key>
      <value></value>
    </param>
    <param>
      <key>window_size</key>
      <value></value>
    </param>
    <param>
      <key>category</key>
      <value>[GRC Hier Blocks]</value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>description</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(8, 8)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>generate_options</key>
      <value>qt_gui</value>
    </param>
    <param>
      <key>hier_block_src_path</key>
      <value>.:</value>
    </param>
    <param>
      <key>id</key>
      <value>baa_seminar</value>
    </param>
    <param>
      <key>max_nouts</key>
      <value>0</value>
    </param>
    <param>
      <key>qt_qss_theme</key>
      <value></value>
    </param>
    <param>
      <key>realtime_scheduling</key>
      <value></value>
    </param>
    <param>
      <key>run_command</key>
      <value>{python} -u {filename}</value>
    </param>
    <param>
      <key>run_options</key>
      <value>run</value>
    </param>
    <param>
      <key>run</key>
      <value>True</value>
    </param>
    <param>
      <key>sizing_mode</key>
      <value>fixed</value>
    </param>
    <param>
      <key>thread_safe_setters</key>
      <value></value>
    </param>
    <param>
      <key>title</key>
      <value></value>
    </param>
    <param>
      <key>placement</key>
      <value>(0,0)</value>
    </param>
  </block>
  <block>
    <key>variable</key>
    <param>
      <key>comment</key>
      <value>The "back end" operates at this many Hz
10Hz should be more than adequate for
any data-logging requirements for this
type of observing</value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(32, 444)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>data_rate</value>
    </param>
    <param>
      <key>value</key>
      <value>10</value>
    </param>
  </block>
  <block>
    <key>variable</key>
    <param>
      <key>comment</key>
      <value>We make this a variable, but in reality
Embedded Python blocks
dont handle runtime vector sizing very well</value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(32, 604)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>fftsize</value>
    </param>
    <param>
      <key>value</key>
      <value>2048</value>
    </param>
  </block>
  <block>
    <key>variable</key>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(8, 160)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>samp_rate</value>
    </param>
    <param>
      <key>value</key>
      <value>2.56e6</value>
    </param>
  </block>
  <block>
    <key>analog_fastnoise_source_x</key>
    <param>
      <key>amp</key>
      <value>1</value>
    </param>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(32, 248)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>analog_fastnoise_source_x_0</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>noise_type</key>
      <value>analog.GR_GAUSSIAN</value>
    </param>
    <param>
      <key>type</key>
      <value>complex</value>
    </param>
    <param>
      <key>seed</key>
      <value>33</value>
    </param>
    <param>
      <key>samples</key>
      <value>9137</value>
    </param>
  </block>
  <block>
    <key>analog_fastnoise_source_x</key>
    <param>
      <key>amp</key>
      <value>1</value>
    </param>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(32, 344)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>analog_fastnoise_source_x_0_0</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>noise_type</key>
      <value>analog.GR_GAUSSIAN</value>
    </param>
    <param>
      <key>type</key>
      <value>complex</value>
    </param>
    <param>
      <key>seed</key>
      <value>52</value>
    </param>
    <param>
      <key>samples</key>
      <value>7539</value>
    </param>
  </block>
  <block>
    <key>blocks_complex_to_mag_squared</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value>A detector
Computes
(I^2)+(Q^2)</value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(256, 32)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>blocks_complex_to_mag_squared_0</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>vlen</key>
      <value>1</value>
    </param>
  </block>
  <block>
    <key>blocks_keep_one_in_n</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value>After filtering, we don't need high
sample rates
reduce to 'data_rate' Hz</value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(680, 28)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>blocks_keep_one_in_n_0</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>n</key>
      <value>int(samp_rate/data_rate)</value>
    </param>
    <param>
      <key>type</key>
      <value>float</value>
    </param>
    <param>
      <key>vlen</key>
      <value>1</value>
    </param>
  </block>
  <block>
    <key>blocks_multiply_xx</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(240, 304)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>blocks_multiply_xx_0</value>
    </param>
    <param>
      <key>type</key>
      <value>complex</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>num_inputs</key>
      <value>2</value>
    </param>
    <param>
      <key>vlen</key>
      <value>1</value>
    </param>
  </block>
  <block>
    <key>blocks_throttle</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(376, 316)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>blocks_throttle_0</value>
    </param>
    <param>
      <key>ignoretag</key>
      <value>True</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>samples_per_second</key>
      <value>samp_rate</value>
    </param>
    <param>
      <key>type</key>
      <value>complex</value>
    </param>
    <param>
      <key>vlen</key>
      <value>1</value>
    </param>
  </block>
  <block>
    <key>epy_block</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>_io_cache</key>
      <value>('BAA:Data Logger', 'blk', [('formatter', 'None'), ('filepat', "'foonly-%d%d%d'"), ('extension', "'.csv'"), ('logtime', '10'), ('fmtstr', "'%11.9f'"), ('nchan', '1'), ('localtime', 'False')], [('0', 'float', 1)], [], 'A slow data textual formatter\n          inputs are expected to be science-data\n             Parameters:\n                formatter - pointer to a custom formatter function\n                filepat - pattern used for formatting filename must provide converters for YYYY MM DD\n                extension - filename extension\n                logtime - how often to log, in seconds\n                fmtstr - formatter for data values -- most provide converters for both values\n                nchan - number of interleaved channels on input', ['extension', 'filepat', 'fmtstr', 'formatter', 'localtime', 'logtime', 'nchan'])</value>
    </param>
    <param>
      <key>_source_code</key>
      <value>"""
Embedded Python Blocks:

Each time this file is saved, GRC will instantiate the first class it finds
to get ports and parameters of your block. The arguments to __init__  will
be the parameters. All of them are required to have default values!
"""

import numpy as np
from gnuradio import gr
import time


class blk(gr.sync_block):  # other base classes are basic_block, decim_block, interp_block
    """A slow data textual formatter
          inputs are expected to be science-data
             Parameters:
                formatter - pointer to a custom formatter function
                filepat - pattern used for formatting filename must provide converters for YYYY MM DD
                extension - filename extension
                logtime - how often to log, in seconds
                fmtstr - formatter for data values -- most provide converters for both values
                nchan - number of interleaved channels on input"""
                
                

    def __init__(self, formatter=None, filepat="foonly-%d%d%d", extension=".csv", logtime=10,fmtstr="%11.9f",nchan=1,localtime=False):  # only default arguments here
        """arguments to this function show up as parameters in GRC"""
        gr.sync_block.__init__(
            self,
            name='BAA:Data Logger',   # will show up in GRC
            in_sig=[np.float32],
            out_sig=None
        )
        # if an attribute with the same name as a parameter is found,
        # a callback is registered (properties work, too).
        
        #
        # Formatter is a function pointer--very often 'None'
        #
        self.formatter = formatter
        
        #
        # Controls the template for filename generation
        #
        self.filepat= filepat
        
        #
        # The filename extension
        #
        self.extension=extension
        
        #
        # The logging interval
        #
        self.logtime=logtime
        
        
        #
        # The data-item formatting string
        #      
        self.fmtstr = fmtstr
        
        #
        # How many (interleaved) channels
        self.nchan = nchan
        
        #
        # Use local time, rather than UTC/GMT?
        #
        self.localtime = localtime
        
        #
        # The averaing cells
        #
        self.avg = [0.0]*nchan
        self.acnt = [0]*nchan

        
        #
        # Keep track of the next channel's averaging cell we
        #  need to update
        #
        self.cndx = 0
        
        
        #
        # This isn't strictly required, since the work function code
        #  will take care of whatever items it gets presented with.
        #
        self.set_output_multiple(nchan)
        
        self.now = time.time()

    def work(self, input_items, output_items):
        
        if (self.localtime == False):
            ltp = time.gmtime()
        else:
            ltp = time.localtime()
        
        #
        # Distribute the input items over the averaging buffer as appropriate
        #  We assume that the input is interleaved by 'nchan'
        #  We use 'self.cndx' to keep track of which channel's averaging
        #  cell we need to put the next value in.
        #
        # Because GR's scheduler has no idea what our internal "shape"
        #  is, it can hand us many, or a few, items, every time we're
        #  called.
        #
        for x in range(len(input_items[0])):
            self.avg[self.cndx % self.nchan] += input_items[0][x]
            self.acnt[self.cndx % self.nchan] += 1
            
            #
            # Increment and modularly reduce cndx
            #
            self.cndx += 1
            self.cndx %= self.nchan
            

        if ((time.time() - self.now) &gt; self.logtime):
            self.now = time.time()
            if (self.formatter == None):
                fp = open(self.filepat % (ltp.tm_year, ltp.tm_mon, ltp.tm_mday) + self.extension, "a")
                fp.write("%02d,%02d,%02d," % (ltp.tm_hour, ltp.tm_min, ltp.tm_sec))
                for x in range(self.nchan):
                    self.avg[x] /= self.acnt[x]
                    self.acnt[x] = 0
                    fp.write (self.fmtstr  % (self.avg[x]))
                    if (x &lt; self.nchan-1):
                        fp.write(",")
                fp.write("\n")
                fp.close()
            else:
                self.formatter(self.filepat,self.extension,self.avg[0],self.avg[1])
            
        return len(input_items[0])
</value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>extension</key>
      <value>'.csv'</value>
    </param>
    <param>
      <key>filepat</key>
      <value>'tp-%04d%02d%02d'</value>
    </param>
    <param>
      <key>fmtstr</key>
      <value>'%11.9f'</value>
    </param>
    <param>
      <key>formatter</key>
      <value>None</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(896, 64)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>formatter</value>
    </param>
    <param>
      <key>localtime</key>
      <value>True</value>
    </param>
    <param>
      <key>logtime</key>
      <value>3</value>
    </param>
    <param>
      <key>nchan</key>
      <value>1</value>
    </param>
  </block>
  <block>
    <key>logpwrfft_x</key>
    <param>
      <key>avg_alpha</key>
      <value>1.0/(samp_rate/fftsize/data_rate)</value>
    </param>
    <param>
      <key>average</key>
      <value>True</value>
    </param>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>fft_size</key>
      <value>fftsize</value>
    </param>
    <param>
      <key>frame_rate</key>
      <value>data_rate</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(640, 392)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>logpwrfft_x_0</value>
    </param>
    <param>
      <key>type</key>
      <value>complex</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>ref_scale</key>
      <value>2</value>
    </param>
    <param>
      <key>sample_rate</key>
      <value>samp_rate</value>
    </param>
  </block>
  <block>
    <key>qtgui_vector_sink_f</key>
    <param>
      <key>autoscale</key>
      <value>False</value>
    </param>
    <param>
      <key>average</key>
      <value>1.0</value>
    </param>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(896, 212)</value>
    </param>
    <param>
      <key>gui_hint</key>
      <value></value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>grid</key>
      <value>True</value>
    </param>
    <param>
      <key>id</key>
      <value>qtgui_vector_sink_f_0</value>
    </param>
    <param>
      <key>alpha1</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color1</key>
      <value>"blue"</value>
    </param>
    <param>
      <key>label1</key>
      <value></value>
    </param>
    <param>
      <key>width1</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha10</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color10</key>
      <value>"dark blue"</value>
    </param>
    <param>
      <key>label10</key>
      <value></value>
    </param>
    <param>
      <key>width10</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha2</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color2</key>
      <value>"red"</value>
    </param>
    <param>
      <key>label2</key>
      <value></value>
    </param>
    <param>
      <key>width2</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha3</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color3</key>
      <value>"green"</value>
    </param>
    <param>
      <key>label3</key>
      <value></value>
    </param>
    <param>
      <key>width3</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha4</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color4</key>
      <value>"black"</value>
    </param>
    <param>
      <key>label4</key>
      <value></value>
    </param>
    <param>
      <key>width4</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha5</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color5</key>
      <value>"cyan"</value>
    </param>
    <param>
      <key>label5</key>
      <value></value>
    </param>
    <param>
      <key>width5</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha6</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color6</key>
      <value>"magenta"</value>
    </param>
    <param>
      <key>label6</key>
      <value></value>
    </param>
    <param>
      <key>width6</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha7</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color7</key>
      <value>"yellow"</value>
    </param>
    <param>
      <key>label7</key>
      <value></value>
    </param>
    <param>
      <key>width7</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha8</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color8</key>
      <value>"dark red"</value>
    </param>
    <param>
      <key>label8</key>
      <value></value>
    </param>
    <param>
      <key>width8</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha9</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color9</key>
      <value>"dark green"</value>
    </param>
    <param>
      <key>label9</key>
      <value></value>
    </param>
    <param>
      <key>width9</key>
      <value>1</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>name</key>
      <value>Total Power</value>
    </param>
    <param>
      <key>nconnections</key>
      <value>1</value>
    </param>
    <param>
      <key>ref_level</key>
      <value>0</value>
    </param>
    <param>
      <key>showports</key>
      <value>True</value>
    </param>
    <param>
      <key>update_time</key>
      <value>0.250</value>
    </param>
    <param>
      <key>vlen</key>
      <value>3600</value>
    </param>
    <param>
      <key>x_axis_label</key>
      <value>"Time (Seconds)"</value>
    </param>
    <param>
      <key>x_start</key>
      <value>0</value>
    </param>
    <param>
      <key>x_step</key>
      <value>1</value>
    </param>
    <param>
      <key>x_units</key>
      <value>""</value>
    </param>
    <param>
      <key>ymax</key>
      <value>1.5</value>
    </param>
    <param>
      <key>ymin</key>
      <value>0</value>
    </param>
    <param>
      <key>y_axis_label</key>
      <value>"Detector Power"</value>
    </param>
    <param>
      <key>y_units</key>
      <value>""</value>
    </param>
  </block>
  <block>
    <key>qtgui_vector_sink_f</key>
    <param>
      <key>autoscale</key>
      <value>False</value>
    </param>
    <param>
      <key>average</key>
      <value>1.0</value>
    </param>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(912, 372)</value>
    </param>
    <param>
      <key>gui_hint</key>
      <value></value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>grid</key>
      <value>True</value>
    </param>
    <param>
      <key>id</key>
      <value>qtgui_vector_sink_f_0_0</value>
    </param>
    <param>
      <key>alpha1</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color1</key>
      <value>"blue"</value>
    </param>
    <param>
      <key>label1</key>
      <value></value>
    </param>
    <param>
      <key>width1</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha10</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color10</key>
      <value>"dark blue"</value>
    </param>
    <param>
      <key>label10</key>
      <value></value>
    </param>
    <param>
      <key>width10</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha2</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color2</key>
      <value>"red"</value>
    </param>
    <param>
      <key>label2</key>
      <value></value>
    </param>
    <param>
      <key>width2</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha3</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color3</key>
      <value>"green"</value>
    </param>
    <param>
      <key>label3</key>
      <value></value>
    </param>
    <param>
      <key>width3</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha4</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color4</key>
      <value>"black"</value>
    </param>
    <param>
      <key>label4</key>
      <value></value>
    </param>
    <param>
      <key>width4</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha5</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color5</key>
      <value>"cyan"</value>
    </param>
    <param>
      <key>label5</key>
      <value></value>
    </param>
    <param>
      <key>width5</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha6</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color6</key>
      <value>"magenta"</value>
    </param>
    <param>
      <key>label6</key>
      <value></value>
    </param>
    <param>
      <key>width6</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha7</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color7</key>
      <value>"yellow"</value>
    </param>
    <param>
      <key>label7</key>
      <value></value>
    </param>
    <param>
      <key>width7</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha8</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color8</key>
      <value>"dark red"</value>
    </param>
    <param>
      <key>label8</key>
      <value></value>
    </param>
    <param>
      <key>width8</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha9</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color9</key>
      <value>"dark green"</value>
    </param>
    <param>
      <key>label9</key>
      <value></value>
    </param>
    <param>
      <key>width9</key>
      <value>1</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>name</key>
      <value>Spectrum</value>
    </param>
    <param>
      <key>nconnections</key>
      <value>1</value>
    </param>
    <param>
      <key>ref_level</key>
      <value>0</value>
    </param>
    <param>
      <key>showports</key>
      <value>True</value>
    </param>
    <param>
      <key>update_time</key>
      <value>0.250</value>
    </param>
    <param>
      <key>vlen</key>
      <value>fftsize</value>
    </param>
    <param>
      <key>x_axis_label</key>
      <value>"Frequency"</value>
    </param>
    <param>
      <key>x_start</key>
      <value>-samp_rate/2.0</value>
    </param>
    <param>
      <key>x_step</key>
      <value>samp_rate/fftsize</value>
    </param>
    <param>
      <key>x_units</key>
      <value>""</value>
    </param>
    <param>
      <key>ymax</key>
      <value>10</value>
    </param>
    <param>
      <key>ymin</key>
      <value>-90</value>
    </param>
    <param>
      <key>y_axis_label</key>
      <value>"Power (dBFS)"</value>
    </param>
    <param>
      <key>y_units</key>
      <value>""</value>
    </param>
  </block>
  <block>
    <key>single_pole_iir_filter_xx</key>
    <param>
      <key>alpha</key>
      <value>1.0/(samp_rate*3)</value>
    </param>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value>A simple filter/integrator</value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(456, 28)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>single_pole_iir_filter_xx_0</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>type</key>
      <value>float</value>
    </param>
    <param>
      <key>vlen</key>
      <value>1</value>
    </param>
  </block>
  <block>
    <key>epy_block</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>_io_cache</key>
      <value>('BAA:Strip Chart', 'blk', [('decim', '100')], [('0', 'float', 1)], [('0', 'float', 3600)], 'A strip chart takes in a stream of floats and produces a 1 hour long\n       strip-chart as output\n       \n       Params:\n          decim - how much to decimate input to produce 1 SPS', ['decim'])</value>
    </param>
    <param>
      <key>_source_code</key>
      <value>"""
Embedded Python Blocks:

Each time this file is saved, GRC will instantiate the first class it finds
to get ports and parameters of your block. The arguments to __init__  will
be the parameters. All of them are required to have default values!
"""

import numpy as np
from gnuradio import gr
import time


class blk(gr.basic_block):  # other base classes are basic_block, decim_block, interp_block
    """A strip chart takes in a stream of floats and produces a 1 hour long
       strip-chart as output
       
       Params:
          decim - how much to decimate input to produce 1 SPS"""

    def __init__(self, decim=100):  # only default arguments here
        """arguments to this function show up as parameters in GRC"""
        gr.basic_block.__init__(
            self,
            name='BAA:Strip Chart',   # will show up in GRC
            in_sig=[np.float32],
            out_sig=[(np.float32,3600)]
        )
        # if an attribute with the same name as a parameter is found,
        # a callback is registered (properties work, too).
        
        #
        # How much do we need to average the input to produce a 1SPS
        #  output?
        #
        self.decim = decim
        
        #
        # The stripchart vector itself--must be persistent in the
        #  object instance
        #
        self.strip = [0.0]*3600
        
        #
        # keeps track of decimation
        #
        self.counter = 0
        
        #
        # We continuously average the input and store it here
        #
        self.avg = 0.0

    def general_work(self, input_items, output_items):
        """take an input item(s), place appropriately in stripchart output"""
        #
        # For each of the input items
        #
        if (self.avg == 0.0):
            self.avg = input_items[0][0]
            self.strip = [self.avg]*len(self.strip)

        for x in range(len(input_items[0])):
            #
            # Two-point moving average for now
            #
            self.avg += input_items[0][x]
            self.counter += 1
            
            #
            # Time to output an item into the stripchart
            #
            if (self.counter &gt;= self.decim):
                self.avg /= self.decim
                
                #
                # Use python array notation to effect a quick
                #  shift of items in the stripchart array
                #
                self.strip = [self.avg] + self.strip[:-1]
                self.counter = 0
        #
        # Stuff output items with the contents of the stripchart
        #
        for y in range(len(output_items[0])):
            for x in range(len(self.strip)):
                output_items[0][y][x] = self.strip[x]
        
        #
        # Tell scheduler we consumed items
        #
        self.consume(0, len(input_items[0]))
        return len(output_items[0])
</value>
    </param>
    <param>
      <key>comment</key>
      <value>Produces a "stripchart" type vector</value>
    </param>
    <param>
      <key>decim</key>
      <value>data_rate</value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(632, 268)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>stripchart</value>
    </param>
  </block>
  <block>
    <key>epy_block</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>_io_cache</key>
      <value>('BAA:Vector Logger', 'blk', [('fftsize', '2048'), ('formatter', 'None'), ('filepat', "'foonly-%04d%02d%02d'"), ('extension', "'.csv'"), ('logtime', '10'), ('fmtstr', "'%11.9f'"), ('localtime', 'False')], [('0', 'float', 2048)], [], 'Logging of vectors (like FFT outputs)', ['extension', 'filepat', 'fmtstr', 'formatter', 'localtime', 'logtime'])</value>
    </param>
    <param>
      <key>_source_code</key>
      <value>"""
Embedded Python Blocks:

Each time this file is saved, GRC will instantiate the first class it finds
to get ports and parameters of your block. The arguments to __init__  will
be the parameters. All of them are required to have default values!
"""

import numpy as np
from gnuradio import gr
import time


class blk(gr.sync_block):  # other base classes are basic_block, decim_block, interp_block
    """Logging of vectors (like FFT outputs)"""

    def __init__(self, fftsize=2048, formatter=None, filepat="foonly-%04d%02d%02d", extension=".csv", logtime=10, fmtstr="%11.9f", localtime=False):  # only default arguments here
        """arguments to this function show up as parameters in GRC"""
        gr.sync_block.__init__(
            self,
            name='BAA:Vector Logger',   # will show up in GRC
            in_sig=[(np.float32,fftsize)],
            out_sig=None
        )
        
        self.formatter = formatter
        self.filepat = filepat
        self.extension = extension
        self.logtime = logtime
        self.fmtstr = fmtstr
        self.localtime = localtime
        self.vecavg = np.zeros(fftsize)
        self.now = time.time()

        

    def work(self, input_items, output_items):
        """Log a vector into a filet"""
        for x in range(len(input_items[0])):
            self.vecavg = np.add(self.vecavg, input_items[0][x])
            self.vecavg = np.divide(self.vecavg, [2.0]*len(self.vecavg))
        
        #
        # If time to log
        #
        if (time.time() - self.now &gt;= self.logtime):
            self.now = time.time()
            #
            # Decide on localtime or gmtime
            #
            if (self.localtime == True):
                ltp = time.localtime()
            else:
                ltp = time.gmtime()
            
            #
            # If they specified a formatter function call it instead
            #
            if (self.formatter != None):
                self.formatter(self.vecavg,self.filepat,self.extension)
            
            #
            # Otherwise, do it here
            #
            else:
				#
				# Open the output file, with a name according to the filepat
				#  specified
				#
                fp = open(self.filepat % (ltp.tm_year, ltp.tm_mon, ltp.tm_mday) + self.extension, "a")
                
                #
                # Write record header
                #
                fp.write ("%02d,%02d,%02d," % (ltp.tm_hour, ltp.tm_min, ltp.tm_sec))
                
                #
                # Write each of the data items in the input vector
                #
                for x in range(len(self.vecavg)):
                    fp.write(self.fmtstr % self.vecavg[x])
                    if (x &lt; len(self.vecavg)-1):
                        fp.write(",")
                fp.write("\n")
                fp.close()
            
            
        return len(input_items[0])
</value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>extension</key>
      <value>'.csv'</value>
    </param>
    <param>
      <key>fftsize</key>
      <value>fftsize</value>
    </param>
    <param>
      <key>filepat</key>
      <value>'fft-0-%04d%02d%02d'</value>
    </param>
    <param>
      <key>fmtstr</key>
      <value>'%6.2f'</value>
    </param>
    <param>
      <key>formatter</key>
      <value>None</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(888, 648)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>vectorlogger</value>
    </param>
    <param>
      <key>localtime</key>
      <value>False</value>
    </param>
    <param>
      <key>logtime</key>
      <value>10</value>
    </param>
  </block>
  <connection>
    <source_block_id>analog_fastnoise_source_x_0</source_block_id>
    <sink_block_id>blocks_multiply_xx_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>analog_fastnoise_source_x_0_0</source_block_id>
    <sink_block_id>blocks_multiply_xx_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>1</sink_key>
  </connection>
  <connection>
    <source_block_id>blocks_complex_to_mag_squared_0</source_block_id>
    <sink_block_id>single_pole_iir_filter_xx_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>blocks_keep_one_in_n_0</source_block_id>
    <sink_block_id>formatter</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>blocks_keep_one_in_n_0</source_block_id>
    <sink_block_id>stripchart</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>blocks_multiply_xx_0</source_block_id>
    <sink_block_id>blocks_throttle_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>blocks_throttle_0</source_block_id>
    <sink_block_id>blocks_complex_to_mag_squared_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>blocks_throttle_0</source_block_id>
    <sink_block_id>logpwrfft_x_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>logpwrfft_x_0</source_block_id>
    <sink_block_id>qtgui_vector_sink_f_0_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>logpwrfft_x_0</source_block_id>
    <sink_block_id>vectorlogger</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>single_pole_iir_filter_xx_0</source_block_id>
    <sink_block_id>blocks_keep_one_in_n_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>stripchart</source_block_id>
    <sink_block_id>qtgui_vector_sink_f_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
</flow_graph>
