options:
  parameters:
    author: ''
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: baa_seminar
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: run
    sizing_mode: fixed
    thread_safe_setters: ''
    title: ''
    window_size: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: data_rate
  id: variable
  parameters:
    comment: 'The "back end" operates at this many Hz

      10Hz should be more than adequate for

      any data-logging requirements for this

      type of observing'
    value: '10'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [105, 167]
    rotation: 0
    state: enabled
- name: fftsize
  id: variable
  parameters:
    comment: 'We make this a variable, but in reality

      Embedded Python blocks

      dont handle runtime vector sizing very well'
    value: '2048'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [32, 604]
    rotation: 0
    state: enabled
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: int(srate)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 160]
    rotation: 0
    state: enabled
- name: blocks_complex_to_mag_squared_0
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: 'A detector

      Computes

      (I^2)+(Q^2)'
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [256, 32]
    rotation: 0
    state: enabled
- name: blocks_keep_one_in_n_0
  id: blocks_keep_one_in_n
  parameters:
    affinity: ''
    alias: ''
    comment: 'After filtering, we don''t need high

      sample rates

      reduce to ''data_rate'' Hz'
    maxoutbuf: '0'
    minoutbuf: '0'
    n: int(samp_rate/data_rate)
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [680, 28]
    rotation: 0
    state: enabled
- name: formatter
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport time\n\n\nclass blk(gr.sync_block):  # other\
      \ base classes are basic_block, decim_block, interp_block\n    \"\"\"A slow\
      \ data textual formatter\n          inputs are expected to be science-data\n\
      \             Parameters:\n                formatter - pointer to a custom formatter\
      \ function\n                filepat - pattern used for formatting filename must\
      \ provide converters for YYYY MM DD\n                extension - filename extension\n\
      \                logtime - how often to log, in seconds\n                fmtstr\
      \ - formatter for data values -- most provide converters for both values\n \
      \               nchan - number of interleaved channels on input\"\"\"\n    \
      \            \n                \n\n    def __init__(self, formatter=None, filepat=\"\
      foonly-%d%d%d\", extension=\".csv\", logtime=10,fmtstr=\"%11.9f\",nchan=1,localtime=False):\
      \  # only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n         \
      \   self,\n            name='BAA:Data Logger',   # will show up in GRC\n   \
      \         in_sig=[np.float32],\n            out_sig=None\n        )\n      \
      \  # if an attribute with the same name as a parameter is found,\n        #\
      \ a callback is registered (properties work, too).\n        \n        #\n  \
      \      # Formatter is a function pointer--very often 'None'\n        #\n   \
      \     self.formatter = formatter\n        \n        #\n        # Controls the\
      \ template for filename generation\n        #\n        self.filepat= filepat\n\
      \        \n        #\n        # The filename extension\n        #\n        self.extension=extension\n\
      \        \n        #\n        # The logging interval\n        #\n        self.logtime=logtime\n\
      \        \n        \n        #\n        # The data-item formatting string\n\
      \        #      \n        self.fmtstr = fmtstr\n        \n        #\n      \
      \  # How many (interleaved) channels\n        self.nchan = nchan\n        \n\
      \        #\n        # Use local time, rather than UTC/GMT?\n        #\n    \
      \    self.localtime = localtime\n        \n        #\n        # The averaing\
      \ cells\n        #\n        self.avg = [0.0]*nchan\n        self.acnt = [0]*nchan\n\
      \n        \n        #\n        # Keep track of the next channel's averaging\
      \ cell we\n        #  need to update\n        #\n        self.cndx = 0\n   \
      \     \n        \n        #\n        # This isn't strictly required, since the\
      \ work function code\n        #  will take care of whatever items it gets presented\
      \ with.\n        #\n        self.set_output_multiple(nchan)\n        \n    \
      \    self.now = time.time()\n\n    def work(self, input_items, output_items):\n\
      \        \n        if (self.localtime == False):\n            ltp = time.gmtime()\n\
      \        else:\n            ltp = time.localtime()\n        \n        #\n  \
      \      # Distribute the input items over the averaging buffer as appropriate\n\
      \        #  We assume that the input is interleaved by 'nchan'\n        #  We\
      \ use 'self.cndx' to keep track of which channel's averaging\n        #  cell\
      \ we need to put the next value in.\n        #\n        # Because GR's scheduler\
      \ has no idea what our internal \"shape\"\n        #  is, it can hand us many,\
      \ or a few, items, every time we're\n        #  called.\n        #\n       \
      \ for x in range(len(input_items[0])):\n            self.avg[self.cndx % self.nchan]\
      \ += input_items[0][x]\n            self.acnt[self.cndx % self.nchan] += 1\n\
      \            \n            #\n            # Increment and modularly reduce cndx\n\
      \            #\n            self.cndx += 1\n            self.cndx %= self.nchan\n\
      \            \n\n        if ((time.time() - self.now) > self.logtime):\n   \
      \         self.now = time.time()\n            if (self.formatter == None):\n\
      \                fp = open(self.filepat % (ltp.tm_year, ltp.tm_mon, ltp.tm_mday)\
      \ + self.extension, \"a\")\n                fp.write(\"%02d,%02d,%02d,\" % (ltp.tm_hour,\
      \ ltp.tm_min, ltp.tm_sec))\n                for x in range(self.nchan):\n  \
      \                  self.avg[x] /= self.acnt[x]\n                    self.acnt[x]\
      \ = 0\n                    fp.write (self.fmtstr  % (self.avg[x]))\n       \
      \             if (x < self.nchan-1):\n                        fp.write(\",\"\
      )\n                fp.write(\"\\n\")\n                fp.close()\n         \
      \   else:\n                self.formatter(self.filepat,self.extension,self.avg[0],self.avg[1])\n\
      \            \n        return len(input_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    extension: '''.csv'''
    filepat: '''tp-%04d%02d%02d'''
    fmtstr: '''%11.9f'''
    formatter: None
    localtime: 'True'
    logtime: '3'
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '1'
  states:
    _io_cache: ('BAA:Data Logger', 'blk', [('formatter', 'None'), ('filepat', "'foonly-%d%d%d'"),
      ('extension', "'.csv'"), ('logtime', '10'), ('fmtstr', "'%11.9f'"), ('nchan',
      '1'), ('localtime', 'False')], [('0', 'float', 1)], [], 'A slow data textual
      formatter\n          inputs are expected to be science-data\n             Parameters:\n                formatter
      - pointer to a custom formatter function\n                filepat - pattern
      used for formatting filename must provide converters for YYYY MM DD\n                extension
      - filename extension\n                logtime - how often to log, in seconds\n                fmtstr
      - formatter for data values -- most provide converters for both values\n                nchan
      - number of interleaved channels on input', ['extension', 'filepat', 'fmtstr',
      'formatter', 'localtime', 'logtime', 'nchan'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [896, 64]
    rotation: 0
    state: enabled
- name: freq
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: RF Frequency (Hz)
    short_id: ''
    type: eng_float
    value: 1420.4058e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [24, 687]
    rotation: 0
    state: true
- name: logpwrfft_x_0
  id: logpwrfft_x
  parameters:
    affinity: ''
    alias: ''
    average: 'True'
    avg_alpha: 1.0/(samp_rate/fftsize/10)
    comment: ''
    fft_size: fftsize
    frame_rate: data_rate
    maxoutbuf: '0'
    minoutbuf: '0'
    ref_scale: '2'
    sample_rate: samp_rate
    type: complex
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [506, 483]
    rotation: 0
    state: true
- name: osmosdr_source_0
  id: osmosdr_source
  parameters:
    affinity: ''
    alias: ''
    ant0: ''
    ant1: ''
    ant10: ''
    ant11: ''
    ant12: ''
    ant13: ''
    ant14: ''
    ant15: ''
    ant16: ''
    ant17: ''
    ant18: ''
    ant19: ''
    ant2: ''
    ant20: ''
    ant21: ''
    ant22: ''
    ant23: ''
    ant24: ''
    ant25: ''
    ant26: ''
    ant27: ''
    ant28: ''
    ant29: ''
    ant3: ''
    ant30: ''
    ant31: ''
    ant4: ''
    ant5: ''
    ant6: ''
    ant7: ''
    ant8: ''
    ant9: ''
    args: rtl=0
    bb_gain0: '20'
    bb_gain1: '20'
    bb_gain10: '20'
    bb_gain11: '20'
    bb_gain12: '20'
    bb_gain13: '20'
    bb_gain14: '20'
    bb_gain15: '20'
    bb_gain16: '20'
    bb_gain17: '20'
    bb_gain18: '20'
    bb_gain19: '20'
    bb_gain2: '20'
    bb_gain20: '20'
    bb_gain21: '20'
    bb_gain22: '20'
    bb_gain23: '20'
    bb_gain24: '20'
    bb_gain25: '20'
    bb_gain26: '20'
    bb_gain27: '20'
    bb_gain28: '20'
    bb_gain29: '20'
    bb_gain3: '20'
    bb_gain30: '20'
    bb_gain31: '20'
    bb_gain4: '20'
    bb_gain5: '20'
    bb_gain6: '20'
    bb_gain7: '20'
    bb_gain8: '20'
    bb_gain9: '20'
    bw0: '0'
    bw1: '0'
    bw10: '0'
    bw11: '0'
    bw12: '0'
    bw13: '0'
    bw14: '0'
    bw15: '0'
    bw16: '0'
    bw17: '0'
    bw18: '0'
    bw19: '0'
    bw2: '0'
    bw20: '0'
    bw21: '0'
    bw22: '0'
    bw23: '0'
    bw24: '0'
    bw25: '0'
    bw26: '0'
    bw27: '0'
    bw28: '0'
    bw29: '0'
    bw3: '0'
    bw30: '0'
    bw31: '0'
    bw4: '0'
    bw5: '0'
    bw6: '0'
    bw7: '0'
    bw8: '0'
    bw9: '0'
    clock_source0: ''
    clock_source1: ''
    clock_source2: ''
    clock_source3: ''
    clock_source4: ''
    clock_source5: ''
    clock_source6: ''
    clock_source7: ''
    comment: ''
    corr0: '0'
    corr1: '0'
    corr10: '0'
    corr11: '0'
    corr12: '0'
    corr13: '0'
    corr14: '0'
    corr15: '0'
    corr16: '0'
    corr17: '0'
    corr18: '0'
    corr19: '0'
    corr2: '0'
    corr20: '0'
    corr21: '0'
    corr22: '0'
    corr23: '0'
    corr24: '0'
    corr25: '0'
    corr26: '0'
    corr27: '0'
    corr28: '0'
    corr29: '0'
    corr3: '0'
    corr30: '0'
    corr31: '0'
    corr4: '0'
    corr5: '0'
    corr6: '0'
    corr7: '0'
    corr8: '0'
    corr9: '0'
    dc_offset_mode0: '0'
    dc_offset_mode1: '0'
    dc_offset_mode10: '0'
    dc_offset_mode11: '0'
    dc_offset_mode12: '0'
    dc_offset_mode13: '0'
    dc_offset_mode14: '0'
    dc_offset_mode15: '0'
    dc_offset_mode16: '0'
    dc_offset_mode17: '0'
    dc_offset_mode18: '0'
    dc_offset_mode19: '0'
    dc_offset_mode2: '0'
    dc_offset_mode20: '0'
    dc_offset_mode21: '0'
    dc_offset_mode22: '0'
    dc_offset_mode23: '0'
    dc_offset_mode24: '0'
    dc_offset_mode25: '0'
    dc_offset_mode26: '0'
    dc_offset_mode27: '0'
    dc_offset_mode28: '0'
    dc_offset_mode29: '0'
    dc_offset_mode3: '0'
    dc_offset_mode30: '0'
    dc_offset_mode31: '0'
    dc_offset_mode4: '0'
    dc_offset_mode5: '0'
    dc_offset_mode6: '0'
    dc_offset_mode7: '0'
    dc_offset_mode8: '0'
    dc_offset_mode9: '0'
    freq0: freq
    freq1: 100e6
    freq10: 100e6
    freq11: 100e6
    freq12: 100e6
    freq13: 100e6
    freq14: 100e6
    freq15: 100e6
    freq16: 100e6
    freq17: 100e6
    freq18: 100e6
    freq19: 100e6
    freq2: 100e6
    freq20: 100e6
    freq21: 100e6
    freq22: 100e6
    freq23: 100e6
    freq24: 100e6
    freq25: 100e6
    freq26: 100e6
    freq27: 100e6
    freq28: 100e6
    freq29: 100e6
    freq3: 100e6
    freq30: 100e6
    freq31: 100e6
    freq4: 100e6
    freq5: 100e6
    freq6: 100e6
    freq7: 100e6
    freq8: 100e6
    freq9: 100e6
    gain0: rfgain
    gain1: '10'
    gain10: '10'
    gain11: '10'
    gain12: '10'
    gain13: '10'
    gain14: '10'
    gain15: '10'
    gain16: '10'
    gain17: '10'
    gain18: '10'
    gain19: '10'
    gain2: '10'
    gain20: '10'
    gain21: '10'
    gain22: '10'
    gain23: '10'
    gain24: '10'
    gain25: '10'
    gain26: '10'
    gain27: '10'
    gain28: '10'
    gain29: '10'
    gain3: '10'
    gain30: '10'
    gain31: '10'
    gain4: '10'
    gain5: '10'
    gain6: '10'
    gain7: '10'
    gain8: '10'
    gain9: '10'
    gain_mode0: 'False'
    gain_mode1: 'False'
    gain_mode10: 'False'
    gain_mode11: 'False'
    gain_mode12: 'False'
    gain_mode13: 'False'
    gain_mode14: 'False'
    gain_mode15: 'False'
    gain_mode16: 'False'
    gain_mode17: 'False'
    gain_mode18: 'False'
    gain_mode19: 'False'
    gain_mode2: 'False'
    gain_mode20: 'False'
    gain_mode21: 'False'
    gain_mode22: 'False'
    gain_mode23: 'False'
    gain_mode24: 'False'
    gain_mode25: 'False'
    gain_mode26: 'False'
    gain_mode27: 'False'
    gain_mode28: 'False'
    gain_mode29: 'False'
    gain_mode3: 'False'
    gain_mode30: 'False'
    gain_mode31: 'False'
    gain_mode4: 'False'
    gain_mode5: 'False'
    gain_mode6: 'False'
    gain_mode7: 'False'
    gain_mode8: 'False'
    gain_mode9: 'False'
    if_gain0: '20'
    if_gain1: '20'
    if_gain10: '20'
    if_gain11: '20'
    if_gain12: '20'
    if_gain13: '20'
    if_gain14: '20'
    if_gain15: '20'
    if_gain16: '20'
    if_gain17: '20'
    if_gain18: '20'
    if_gain19: '20'
    if_gain2: '20'
    if_gain20: '20'
    if_gain21: '20'
    if_gain22: '20'
    if_gain23: '20'
    if_gain24: '20'
    if_gain25: '20'
    if_gain26: '20'
    if_gain27: '20'
    if_gain28: '20'
    if_gain29: '20'
    if_gain3: '20'
    if_gain30: '20'
    if_gain31: '20'
    if_gain4: '20'
    if_gain5: '20'
    if_gain6: '20'
    if_gain7: '20'
    if_gain8: '20'
    if_gain9: '20'
    iq_balance_mode0: '0'
    iq_balance_mode1: '0'
    iq_balance_mode10: '0'
    iq_balance_mode11: '0'
    iq_balance_mode12: '0'
    iq_balance_mode13: '0'
    iq_balance_mode14: '0'
    iq_balance_mode15: '0'
    iq_balance_mode16: '0'
    iq_balance_mode17: '0'
    iq_balance_mode18: '0'
    iq_balance_mode19: '0'
    iq_balance_mode2: '0'
    iq_balance_mode20: '0'
    iq_balance_mode21: '0'
    iq_balance_mode22: '0'
    iq_balance_mode23: '0'
    iq_balance_mode24: '0'
    iq_balance_mode25: '0'
    iq_balance_mode26: '0'
    iq_balance_mode27: '0'
    iq_balance_mode28: '0'
    iq_balance_mode29: '0'
    iq_balance_mode3: '0'
    iq_balance_mode30: '0'
    iq_balance_mode31: '0'
    iq_balance_mode4: '0'
    iq_balance_mode5: '0'
    iq_balance_mode6: '0'
    iq_balance_mode7: '0'
    iq_balance_mode8: '0'
    iq_balance_mode9: '0'
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '1'
    num_mboards: '1'
    sample_rate: samp_rate
    sync: sync
    time_source0: ''
    time_source1: ''
    time_source2: ''
    time_source3: ''
    time_source4: ''
    time_source5: ''
    time_source6: ''
    time_source7: ''
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [202, 170]
    rotation: 0
    state: true
- name: qtgui_freq_sink_x_0
  id: qtgui_freq_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    average: '0.1'
    axislabels: 'True'
    bw: samp_rate
    color1: '"blue"'
    color10: '"dark blue"'
    color2: '"red"'
    color3: '"green"'
    color4: '"black"'
    color5: '"cyan"'
    color6: '"magenta"'
    color7: '"yellow"'
    color8: '"dark red"'
    color9: '"dark green"'
    comment: ''
    ctrlpanel: 'False'
    fc: freq
    fftsize: fftsize
    freqhalf: 'True'
    grid: 'True'
    gui_hint: ''
    label: Power
    label1: ''
    label10: ''''''
    label2: ''''''
    label3: ''''''
    label4: ''''''
    label5: ''''''
    label6: ''''''
    label7: ''''''
    label8: ''''''
    label9: ''''''
    legend: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    name: RF Spectrum
    nconnections: '1'
    showports: 'False'
    tr_chan: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_tag: '""'
    type: complex
    units: dB
    update_time: 1.0/data_rate
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    wintype: firdes.WIN_BLACKMAN_hARRIS
    ymax: '10'
    ymin: '-140'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [901, 432]
    rotation: 0
    state: true
- name: qtgui_vector_sink_f_0
  id: qtgui_vector_sink_f
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    average: '1.0'
    color1: '"blue"'
    color10: '"dark blue"'
    color2: '"red"'
    color3: '"green"'
    color4: '"black"'
    color5: '"cyan"'
    color6: '"magenta"'
    color7: '"yellow"'
    color8: '"dark red"'
    color9: '"dark green"'
    comment: ''
    grid: 'True'
    gui_hint: ''
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    name: Total Power
    nconnections: '1'
    ref_level: '0'
    showports: 'True'
    update_time: '0.250'
    vlen: '3600'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    x_axis_label: '"Time (Seconds)"'
    x_start: '0'
    x_step: '1'
    x_units: '""'
    y_axis_label: '"Detector Power"'
    y_units: '""'
    ymax: '1.5'
    ymin: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [896, 212]
    rotation: 0
    state: enabled
- name: rfgain
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: RF Gain (dB)
    short_id: ''
    type: eng_float
    value: '40'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [175, 685]
    rotation: 0
    state: true
- name: single_pole_iir_filter_xx_0
  id: single_pole_iir_filter_xx
  parameters:
    affinity: ''
    alias: ''
    alpha: 1.0/(samp_rate*3)
    comment: A simple filter/integrator
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [456, 28]
    rotation: 0
    state: enabled
- name: srate
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Sample Rate (SPS)
    short_id: ''
    type: eng_float
    value: 2.56e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [305, 687]
    rotation: 0
    state: true
- name: stripchart
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport time\n\n\nclass blk(gr.basic_block):  # other\
      \ base classes are basic_block, decim_block, interp_block\n    \"\"\"A strip\
      \ chart takes in a stream of floats and produces a 1 hour long\n       strip-chart\
      \ as output\n       \n       Params:\n          decim - how much to decimate\
      \ input to produce 1 SPS\"\"\"\n\n    def __init__(self, decim=100):  # only\
      \ default arguments here\n        \"\"\"arguments to this function show up as\
      \ parameters in GRC\"\"\"\n        gr.basic_block.__init__(\n            self,\n\
      \            name='BAA:Strip Chart',   # will show up in GRC\n            in_sig=[np.float32],\n\
      \            out_sig=[(np.float32,3600)]\n        )\n        # if an attribute\
      \ with the same name as a parameter is found,\n        # a callback is registered\
      \ (properties work, too).\n        \n        #\n        # How much do we need\
      \ to average the input to produce a 1SPS\n        #  output?\n        #\n  \
      \      self.decim = decim\n        \n        #\n        # The stripchart vector\
      \ itself--must be persistent in the\n        #  object instance\n        #\n\
      \        self.strip = [0.0]*3600\n        \n        #\n        # keeps track\
      \ of decimation\n        #\n        self.counter = 0\n        \n        #\n\
      \        # We continuously average the input and store it here\n        #\n\
      \        self.avg = 0.0\n\n    def general_work(self, input_items, output_items):\n\
      \        \"\"\"take an input item(s), place appropriately in stripchart output\"\
      \"\"\n        #\n        # For each of the input items\n        #\n        if\
      \ (self.avg == 0.0):\n            self.avg = input_items[0][0]\n           \
      \ self.strip = [self.avg]*len(self.strip)\n\n        for x in range(len(input_items[0])):\n\
      \            #\n            # Two-point moving average for now\n           \
      \ #\n            self.avg += input_items[0][x]\n            self.counter +=\
      \ 1\n            \n            #\n            # Time to output an item into\
      \ the stripchart\n            #\n            if (self.counter >= self.decim):\n\
      \                self.avg /= self.decim\n                \n                #\n\
      \                # Use python array notation to effect a quick\n           \
      \     #  shift of items in the stripchart array\n                #\n       \
      \         self.strip = [self.avg] + self.strip[:-1]\n                self.counter\
      \ = 0\n        #\n        # Stuff output items with the contents of the stripchart\n\
      \        #\n        for y in range(len(output_items[0])):\n            for x\
      \ in range(len(self.strip)):\n                output_items[0][y][x] = self.strip[x]\n\
      \        \n        #\n        # Tell scheduler we consumed items\n        #\n\
      \        self.consume(0, len(input_items[0]))\n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: Produces a "stripchart" type vector
    decim: data_rate
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('BAA:Strip Chart', 'blk', [('decim', '100')], [('0', 'float', 1)],
      [('0', 'float', 3600)], 'A strip chart takes in a stream of floats and produces
      a 1 hour long\n       strip-chart as output\n       \n       Params:\n          decim
      - how much to decimate input to produce 1 SPS', ['decim'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [632, 268]
    rotation: 0
    state: enabled
- name: vectorlogger
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport time\n\n\nclass blk(gr.sync_block):  # other\
      \ base classes are basic_block, decim_block, interp_block\n    \"\"\"Logging\
      \ of vectors (like FFT outputs)\"\"\"\n\n    def __init__(self, fftsize=2048,\
      \ formatter=None, filepat=\"foonly-%04d%02d%02d\", extension=\".csv\",\n   \
      \     logtime=10, fmtstr=\"%11.9f\", localtime=False, fftshift=True):  # only\
      \ default arguments here\n        \"\"\"arguments to this function show up as\
      \ parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n            self,\n\
      \            name='BAA:Vector Logger',   # will show up in GRC\n           \
      \ in_sig=[(np.float32,fftsize)],\n            out_sig=None\n        )\n    \
      \    \n        self.formatter = formatter\n        self.filepat = filepat\n\
      \        self.extension = extension\n        self.logtime = logtime\n      \
      \  self.fmtstr = fmtstr\n        self.localtime = localtime\n        self.vecavg\
      \ = np.zeros(fftsize)\n        self.now = time.time()\n        self.fftshift\
      \ = fftshift\n\n        \n\n    def work(self, input_items, output_items):\n\
      \        \"\"\"Log a vector into a filet\"\"\"\n        for x in range(len(input_items[0])):\n\
      \            self.vecavg = np.add(self.vecavg, input_items[0][x])\n        \
      \    self.vecavg = np.divide(self.vecavg, [2.0]*len(self.vecavg))\n        \n\
      \        #\n        # If time to log\n        #\n        if (time.time() - self.now\
      \ >= self.logtime):\n            self.now = time.time()\n            #\n   \
      \         # Decide on localtime or gmtime\n            #\n            if (self.localtime\
      \ == True):\n                ltp = time.localtime()\n            else:\n   \
      \             ltp = time.gmtime()\n            \n            #\n           \
      \ # If they specified a formatter function call it instead\n            #\n\
      \            if (self.formatter != None):\n                self.formatter(self.vecavg,self.filepat,self.extension)\n\
      \            \n            #\n            # Otherwise, do it here\n        \
      \    #\n            else:\n                #\n                # Open the output\
      \ file, with a name according to the filepat\n                #  specified\n\
      \                #\n                fp = open(self.filepat % (ltp.tm_year, ltp.tm_mon,\
      \ ltp.tm_mday) + self.extension, \"a\")\n                \n                #\n\
      \                # Write record header\n                #\n                fp.write\
      \ (\"%02d,%02d,%02d,\" % (ltp.tm_hour, ltp.tm_min, ltp.tm_sec))\n          \
      \      \n                #\n                # Write each of the data items in\
      \ the input vector\n                #\n                \n                #\n\
      \                # Check if they want us to  do an FFTSHIFT operation\n    \
      \            #  (to  normalize the ordering of FFTW3 outputs)\n            \
      \    #\n                if (self.fftshift == True):\n                    l =\
      \ len(self.vecavg)\n                    l1 = list(self.vecavg[int(l/2):])\n\
      \                    l2 = list(self.vecavg[0:int(l/2)])\n                  \
      \  lout = l1 + l2\n                    lout = np.array(lout)\n             \
      \   else:\n                    lout = self.vecavg\n                for x in\
      \ range(len(self.vecavg)):\n                    fp.write(self.fmtstr % lout[x])\n\
      \                    if (x < len(self.vecavg)-1):\n                        fp.write(\"\
      ,\")\n                fp.write(\"\\n\")\n                fp.close()\n      \
      \      \n            \n        return len(input_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    extension: '''.csv'''
    fftshift: 'True'
    fftsize: fftsize
    filepat: '''fft-0-%04d%02d%02d'''
    fmtstr: '''%6.2f'''
    formatter: None
    localtime: 'False'
    logtime: '10'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('BAA:Vector Logger', 'blk', [('fftsize', '2048'), ('formatter', 'None'),
      ('filepat', "'foonly-%04d%02d%02d'"), ('extension', "'.csv'"), ('logtime', '10'),
      ('fmtstr', "'%11.9f'"), ('localtime', 'False'), ('fftshift', 'True')], [('0',
      'float', 2048)], [], 'Logging of vectors (like FFT outputs)', ['extension',
      'fftshift', 'filepat', 'fmtstr', 'formatter', 'localtime', 'logtime'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [888, 648]
    rotation: 0
    state: enabled

connections:
- [blocks_complex_to_mag_squared_0, '0', single_pole_iir_filter_xx_0, '0']
- [blocks_keep_one_in_n_0, '0', formatter, '0']
- [blocks_keep_one_in_n_0, '0', stripchart, '0']
- [logpwrfft_x_0, '0', vectorlogger, '0']
- [osmosdr_source_0, '0', blocks_complex_to_mag_squared_0, '0']
- [osmosdr_source_0, '0', logpwrfft_x_0, '0']
- [osmosdr_source_0, '0', qtgui_freq_sink_x_0, '0']
- [single_pole_iir_filter_xx_0, '0', blocks_keep_one_in_n_0, '0']
- [stripchart, '0', qtgui_vector_sink_f_0, '0']

metadata:
  file_format: 1
